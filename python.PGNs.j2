from .utils import *
from .message import NMEA2000Message, NMEA2000Field, LookupFieldTypeEnumeration
from .consts import PhysicalQuantities, FieldTypes

master_dict = {
{% for lookup in data['LookupEnumerations']%}
    '{{ lookup.Name }}': {
        {%- for item in lookup.EnumValues %}
        {{ item.Value }}: "{{ item.Name }}",
        {%- endfor %}
    },
{%- endfor %}
}

master_flags_dict = {
{% for lookup in data['LookupBitEnumerations']%}
    '{{ lookup.Name }}': {
        {%- for item in lookup.EnumBitValues %}
        {{ item.Bit }}: "{{ item.Name }}",
        {%- endfor %}
    },
{%- endfor %}
}

master_indirect_lookup_dict = {
{% for lookup in data['LookupIndirectEnumerations']%}
    '{{ lookup.Name }}': {
        {%- for item in lookup.EnumValues %}
        "{{ item.Value1 }}_{{ item.Value2 }}": "{{ item.Name }}",
        {%- endfor %}
    },
{%- endfor %}
}


{% for lookup in data['LookupEnumerations']%}
lookup_dict_encode_{{ lookup.Name }} = {
    {%- for item in lookup.EnumValues %}
    "{{ item.Name }}" : {{ item.Value }},
    {%- endfor %}
}
def lookup_encode_{{ lookup.Name }}(value):
    result = lookup_dict_encode_{{ lookup.Name }}.get(value, None)
    if result is None:
        raise Exception(f"Cant encode this message, {value} is missing from {{lookup.Name}}")
    return result
{% endfor %}


{% for lookup_field_type in data['LookupFieldTypeEnumerations']%}
lookup_field_type_dict_{{ lookup_field_type.Name }} = {
    {%- for item in lookup_field_type.EnumFieldTypeValues %}
    {{ item.value }}: LookupFieldTypeEnumeration("{{ item.name }}", FieldTypes.{{ item.FieldType }}, {% if item.Resolution is defined -%}{{item.Resolution}}{%- else -%}None{%- endif -%}, {% if item.Unit is defined -%}"{{item.Unit}}"{%- else -%}None{%- endif -%}, {{ item.Bits }}, {% if item.LookupEnumeration is defined -%}"{{item.LookupEnumeration}}"{%- else -%}None{%- endif -%}),
    {%- endfor %}
}
def lookup_field_type_{{ lookup_field_type.Name }}(value):
    return lookup_field_type_dict_{{ lookup_field_type.Name }}.get(value)
{% endfor %}


{%- set groups_ns = namespace(pgn_groups={}) %}
{%- for pgn in data['PGNs'] %}
    {%- set name = pgn.PGN %}
    {%- if name in groups_ns.pgn_groups %}
        {%- set _ = groups_ns.pgn_groups[name].append(pgn) %}
    {%- else %}
        {%- set _ = groups_ns.pgn_groups.update({name: [pgn]}) %}
    {%- endif %}
{%- endfor %}


{%- for name, pgns_in_group in groups_ns.pgn_groups.items() %}
def is_fast_pgn_{{ pgns_in_group[0].PGN }}() -> bool:
    """Return True if PGN {{ pgns_in_group[0].PGN }} is a fast PGN."""
{%- if pgns_in_group[0].Type == 'Fast' %}
    return True
{%- elif pgns_in_group[0].Type == 'Single' %}
    return False
{%- else %}
    raise Exception('PGEN type {{ pgns_in_group[0].Type }} not supported')
{% endif %}

{%- set ns_pgn = namespace(has_match=false) %}

{%- for pgn in pgns_in_group %}
{%- for field in pgn.Fields %}
    {%- if field.Match is defined %}
        {%- set ns_pgn.has_match = true %}
    {%- endif %}
{%- endfor %}
{%- if pgn.Fallback is defined and pgn.Fallback == true %}
    {%- set ns_pgn.fallback_pgn = pgn %}
{%- endif %}
{%- endfor %}

{%- if pgns_in_group | length  > 1 and ns_pgn.has_match == false %}
# ERROR: This PGN is corrupted. It has multiple fields but none of them have a match attribute.
{%- endif %}

{%- if pgns_in_group | length  > 1 and ns_pgn.has_match == true %}
# Complex PGN. number of matches: {{ pgns_in_group | length }}
def decode_pgn_{{ pgns_in_group[0].PGN }}(data_raw: int) -> NMEA2000Message:
    {%- for pgn in pgns_in_group if pgn.Fallback is not defined or pgn.Fallback == false %}
    # {{ pgn.Id }} | Description: {{ pgn.Description }}
    if (
        {%- for field in pgn.Fields if field.Match is defined%}
        {%- set field_FF = bits_to_hex(field.BitLength) %}
        (((data_raw >> {{ field.BitOffset }}) & {{ field_FF }}) == {{ field.Match }}){% if not loop.last %} and{% endif %}
        {%- endfor%}
        ):
        return decode_pgn_{{ pgn.PGN }}_{{ pgn.Id }}(data_raw)
    {% endfor%}
    {% if ns_pgn.fallback_pgn is defined -%}
    return decode_pgn_{{ ns_pgn.fallback_pgn.PGN }}_{{ ns_pgn.fallback_pgn.Id }}(data_raw)
    {% else %}
    raise Exception("No matching sub-PGN found")
    {% endif %}
{%- endif %}
{%- for pgn in pgns_in_group %}
{%- if pgns_in_group | length  > 1 and ns_pgn.has_match == true %}
{%- set func_name_suffix = pgn.PGN | string + '_' + pgn.Id %}
{%- else %}
{%- set func_name_suffix = pgn.PGN %}
{%- endif %}
def decode_pgn_{{ func_name_suffix }}(data_raw: int) -> NMEA2000Message:
    """Decode PGN {{ pgn.PGN }}."""
    nmea2000Message = NMEA2000Message({{pgn.PGN}}, '{{pgn.Id}}', '{{pgn.Description}}')
    {%- set ns_fields = namespace() %}
    running_bit_offset = 0
    {%- for field in pgn.Fields %}
    {%- set field_name = generate_field_name(field.Name, field.FieldType, field.BitOffset) %}
    {%- set field_signed = field.Signed | default(false)  %}
    # {{ field.Order }}:{{ field_name }} | Offset: {{ field.BitOffset }}, Length: {{ field.BitLength }}, Signed: {{ field_signed }} Resolution: {{ field.Resolution }}, Field Type: {{ field.FieldType }}, Match: {{ field.Match }}, PartOfPrimaryKey: {{ field.PartOfPrimaryKey }},
    {%- if field.BitOffset is defined %}
    running_bit_offset = {{ field.BitOffset }}
    {%- endif %}
    {%- if field.FieldType == 'NUMBER' or field.FieldType == 'MMSI'%}
    {{ field_name }} = {{ field_name }}_raw = decode_number(data_raw, running_bit_offset, {{ field.BitLength }}, {{ field_signed }}, {{ field.Resolution }})
        {%- elif field.FieldType == 'LOOKUP' %}
    {{ field_name }}_raw = decode_int(data_raw, running_bit_offset, {{ field.BitLength }})
    {{ field_name }} = master_dict['{{ field.LookupEnumeration }}'].get({{ field_name }}_raw, None)
        {%- elif field.FieldType == 'BITLOOKUP' %}
    {{ field_name }}_raw = decode_int(data_raw, running_bit_offset, {{ field.BitLength }})
    {{ field_name }} = decode_bit_lookup({{ field_name }}_raw, master_flags_dict['{{ field.LookupBitEnumeration }}'])
        {%- elif field.FieldType == 'FIELDTYPE_LOOKUP' %}
    {{ field_name }}_raw = decode_int(data_raw, running_bit_offset, {{ field.BitLength }})
    kv_metadata = lookup_field_type_{{ field.LookupFieldTypeEnumeration }}({{ field_name }}_raw)
    {{ field_name }} = kv_name = kv_metadata.name
        {%- elif field.FieldType == 'KEY_VALUE' %}
    if kv_metadata.field_type == 'LOOKUP':
        {{ field_name }}_raw = decode_int(data_raw, running_bit_offset, kv_metadata.bits)
        {{ field_name }} = master_dict[kv_metadata.lookup_enumeration].get({{ field_name }}_raw, None)
    if kv_metadata.field_type == 'NUMBER':
        {{ field_name }} = {{ field_name }}_raw = decode_number(data_raw, running_bit_offset, kv_metadata.bits, {{ field_signed }}, kv_metadata.resolution)
    if kv_metadata.field_type == 'TIME':
        {{ field_name }}_raw = decode_number(data_raw, running_bit_offset, kv_metadata.bits, {{ field_signed }},kv_metadata.resolution)
        {{ field_name }} = decode_time({{ field_name }}_raw)
    nmea2000Message.fields.append(NMEA2000Field('{{ field_name }}', kv_metadata.name, '', kv_metadata.unit, {{ field_name }}, {{ field_name }}_raw, {% if field.PhysicalQuantity is defined -%}PhysicalQuantities.{{field.PhysicalQuantity}}{%- else -%}None{%- endif -%}, kv_metadata.field_type, {% if field.PartOfPrimaryKey is defined -%}{{field.PartOfPrimaryKey}}{%- else -%}False{%- endif -%}))
    running_bit_offset += kv_metadata.bits
        {%- elif field.FieldType == 'STRING_FIX'%}
    {{ field_name }} = {{ field_name }}_raw = decode_string_fix(data_raw, running_bit_offset, {{ field.BitLength }})
        {%- elif field.FieldType == 'STRING_LZ'%}
    {{ field_name }} = {{ field_name }}_raw = decode_string_lz(data_raw, running_bit_offset, {{ field.BitLength }})
        {%- elif field.FieldType == 'STRING_LAU'%}
    {{ field_name }}_raw, bits_to_skip = decode_string_lau(data_raw, running_bit_offset)
    {{ field_name }} = {{ field_name }}_raw
    running_bit_offset += bits_to_skip
        {%- elif field.FieldType == 'FLOAT'%}
    {{ field_name }} = {{ field_name }}_raw = decode_float(data_raw, running_bit_offset, {{ field.BitLength }})
        {%- elif field.FieldType == 'TIME' %}
    {{ field_name }}_raw = decode_number(data_raw, running_bit_offset, {{ field.BitLength }}, {{ field_signed }}, {{ field.Resolution }})
    {{ field_name }} = decode_time({{ field_name }}_raw)
        {%- elif field.FieldType == 'DATE' %}
    {{ field_name }}_raw = decode_number(data_raw, running_bit_offset, {{ field.BitLength }}, {{ field_signed }}, {{ field.Resolution }})
    {{ field_name }} = decode_date({{ field_name }}_raw)
        {%- elif field.FieldType == 'RESERVED' or field.FieldType == 'SPARE' %}
    {{ field_name }} = {{ field_name }}_raw = decode_int(data_raw, running_bit_offset, {{ field.BitLength }})
        {%- elif field.FieldType == 'INDIRECT_LOOKUP' %}
            {%- set ns_fields.indirect_lookup_order_orig = field.Order %}
            {%- set ns_fields.indirect_lookup_order = field.LookupIndirectEnumerationFieldOrder %}
            {%- set ns_fields.indirect_lookup_lookup = field.LookupIndirectEnumeration %}
            {%- set ns_fields.indirect_lookup_field_name = field_name %}
    {{ field_name }}_raw = decode_int(data_raw, running_bit_offset, {{ field.BitLength }})
    {{ field_name }} = 'TEMP_VAL'
        {%- elif field.FieldType == 'BINARY' %}
            {%- if field.BitLength is defined %}
    {{ field_name }} = {{ field_name }}_raw = decode_int(data_raw, running_bit_offset, {{ field.BitLength }})
            {%- else -%}
            {%- set length_field = pgn.Fields[field.BitLengthField-1] %}
            {%- set length_field_name = generate_field_name(length_field.Name, length_field.FieldType, length_field.BitOffset) %}
    {{ field_name }} = {{ field_name }}_raw = decode_int(data_raw, running_bit_offset, {{ length_field_name }})
            {%- endif -%}
        {%- else %}
    raise Exception("FieldType ({{ field.FieldType }}) not supported")
        {%- endif %}
    {%- if field.FieldType != 'KEY_VALUE'  %}
    nmea2000Message.fields.append(NMEA2000Field('{{ field_name }}', '{{ field.Name }}', {% if field.Description is defined -%}"{{field.Description}}"{%- else -%}None{%- endif -%}, {% if field.Unit is defined -%}'{{field.Unit}}'{%- else -%}None{%- endif -%}, {{ field_name }}, {{ field_name }}_raw, {% if field.PhysicalQuantity is defined -%}PhysicalQuantities.{{field.PhysicalQuantity}}{%- else -%}None{%- endif -%}, FieldTypes.{{field.FieldType}}, {% if field.PartOfPrimaryKey is defined -%}{{field.PartOfPrimaryKey}}{%- else -%}False{%- endif -%}))
    {% if field.BitLength is defined -%}
    running_bit_offset += {{ field.BitLength }}
    {%- endif -%}
    {%- if ns_fields.indirect_lookup_order == field.Order %}
    combined_key = str({{ field_name }}_raw) + "_" + str({{ ns_fields.indirect_lookup_field_name }}_raw)
    {{ ns_fields.indirect_lookup_field_name }} = master_indirect_lookup_dict['{{ ns_fields.indirect_lookup_lookup }}'].get(combined_key, None)
    nmea2000Message.fields[{{ ns_fields.indirect_lookup_order_orig-1 }}].value = {{ ns_fields.indirect_lookup_field_name }}
    {%- endif -%}
    {%- endif %}
{% endfor %}
    return nmea2000Message

def encode_pgn_{{ func_name_suffix }}(nmea2000Message: NMEA2000Message) -> int:
    """Encode Nmea2000Message object to binary data for PGN {{ pgn.PGN }}."""
    data_raw = 0
    {%- for field in pgn.Fields %}
    {%- if field.BitLength is not defined or field.BitOffset is not defined %}
    raise Exception ("PGN {{pgn.PGN}} not supporting encoding for now as {{field.Name}} is missing BitLength or BitOffset")
    {%- else %}
    {%- set field_name = generate_field_name(field.Name, field.FieldType, field.BitOffset) %}
    # {{ field_name }} | Offset: {{ field.BitOffset }}, Length: {{ field.BitLength }}, Resolution: {{ field.Resolution }}, Field Type: {{ field.FieldType }}
    {%- if field.FieldType == 'NUMBER'%}
    field_value = next((f.value for f in nmea2000Message.fields if f.id == '{{ field_name }}'), None)
    {%- elif field.FieldType == 'FLOAT'%}
    field_value = next((encode_float(f.value) for f in nmea2000Message.fields if f.id == '{{ field_name }}'), None)
    {%- elif field.FieldType == 'LOOKUP' %}
    field_value = next((f.raw_value if f.raw_value is not None else lookup_encode_{{field.LookupEnumeration}}(f.value) for f in nmea2000Message.fields if f.id == '{{ field_name }}'), None)
    {%- elif field.FieldType == 'STRING_FIX' or field.FieldType == 'STRING_LZ' %}
    # Skipping STRING field types
    {%- elif field.BitLength > 256 %}
    # Skipping fields longer than 256
    {%- else %}
    field_value = next((f.value for f in nmea2000Message.fields if f.id == '{{ field_name }}'), None)
    {%- endif %}
    if field_value is None:
        raise Exception("Cant encode this message, missing '{{field.Name}}'")
    {%- if field.Resolution is defined and field.Resolution != 1 %}        
    data_raw |= (int(field_value / {{ field.Resolution }}) & {{ bits_to_hex(field.BitLength) }}) << {{ field.BitOffset }}
    {% else %}
    data_raw |= (field_value & {{ bits_to_hex(field.BitLength) }}) << {{ field.BitOffset }}
    {%- endif %}
    {%- endif %}
    {%- endfor %}
    return data_raw
{% endfor %}
{% endfor %}
